name: $(Build.BuildId)

trigger:
  branches:
    include:
      - master

pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

stages:
- stage: BuildStage
  displayName: Build
  jobs:
  - job: BuildJob
    displayName: Build
    steps:
    - powershell: |
        $projectFileName = "src/UpdatesService/UpdatesService.csproj"
        
        [xml]$csproj = Get-Content $projectFileName
        [System.Xml.XmlElement]$propertyGroup = $csproj.Project.PropertyGroup[0]
        
        $serviceVersion = $propertyGroup.Version
        
        if ($serviceVersion -eq $null) {
            $serviceVersion = "0.0.0"
        }
        
        $serviceVersion = $serviceVersion + ".$(Build.BuildId)"
        
        if ("$(Build.SourceBranchName)" -ne "master") {
            $serviceVersion = $serviceVersion + "-preview"
        }
        
        $propertyGroup.Version = $serviceVersion
        
        $utf8WithBom = New-Object System.Text.UTF8Encoding($true)
        $sw = New-Object System.IO.StreamWriter($projectFileName, $false, $utf8WithBom)
        $csproj.Save($sw)
        
        Write-Host "Service version: ${serviceVersion}"
        Write-Host "##vso[task.setvariable variable=ServiceVersion]${serviceVersion}"
      displayName: Generate Service Version

    # With this script we build target 'build' in Docker file (which also runs project tests) and publish tests results.
    # The final image with published application is built later in Docker task.
    - script: |
        docker build --target build -t musicfeed/test-results-$(ServiceVersion) -f src/UpdatesService/Dockerfile .
        docker create -ti --name test-results musicfeed/test-results-$(ServiceVersion)
        docker cp test-results:/project/tests/UpdatesService.IntegrationTests/TestResults/UpdatesService.trx $(Build.ArtifactStagingDirectory)/UpdatesService.IntegrationTests.trx
        docker rm -fv test-results
      failOnStderr: true
      displayName: Build & Test

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '*.trx'
        searchFolder: $(Build.ArtifactStagingDirectory)
        mergeTestResults: true
        failTaskOnFailedTests: true

    - task: Docker@2
      displayName: Build & Push Docker Image
      inputs:
        containerRegistry: codefuller @ hub.docker.com
        repository: codefuller/musicfeed-updates-service
        Dockerfile: src/UpdatesService/Dockerfile
        buildContext: .
        tags: |
          $(ServiceVersion)
          latest
        addPipelineData: false

    - powershell: |
        $fileName = "deploy/updates-service.yaml"
        $imagePart = "image: codefuller/musicfeed-updates-service"
        
        (Get-Content -path $fileName -Raw) -replace "${imagePart}:latest", "${imagePart}:$(ServiceVersion)" | Set-Content -NoNewline -Path $fileName
      failOnStderr: true
      displayName: Update Image Tag in k8s Manifest

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: k8s Manifest'
      inputs:
        targetPath: deploy/updates-service.yaml
        artifact: k8s-manifest

- stage: BuildClientNuGetStage
  displayName: Build UpdatesService.Client NuGet
  jobs:
  - job: BuildClientNuGetJob
    displayName: Build UpdatesService.Client NuGet
    steps:
    - powershell: |
        $projectFileName = "src/UpdatesService.Client/UpdatesService.Client.csproj"
        
        [xml]$csproj = Get-Content $projectFileName
        [System.Xml.XmlElement]$propertyGroup = $csproj.Project.PropertyGroup[0]
        
        if ("$(Build.SourceBranchName)" -ne "master") {
            $suffix = "preview-{0}" -f ("$(Build.BuildNumber)".PadLeft(6, "0"))
        } else {
            $suffix = ""
        }
        
        $propertyGroup.VersionSuffix = $suffix
        
        $utf8WithBom = New-Object System.Text.UTF8Encoding($true)
        $sw = New-Object System.IO.StreamWriter($projectFileName, $false, $utf8WithBom)
        $csproj.Save($sw)
      displayName: Set Package Suffix

    - task: DotNetCoreCLI@2
      displayName: Restore Packages
      inputs:
        command: restore
        projects: src/UpdatesService.Client/UpdatesService.Client.csproj

    - task: DotNetCoreCLI@2
      displayName: Build Project
      inputs:
        projects: src/UpdatesService.Client/UpdatesService.Client.csproj
        arguments: --no-restore --configuration Release

    - task: DotNetCoreCLI@2
      displayName: Pack NuGet Package
      inputs:
        command: pack
        packagesToPack: src/UpdatesService.Client/UpdatesService.Client.csproj
        configuration: Release
        nobuild: true

    - script: |
        # We use dotnet push to handle 409 error for existing packages
        # Neither dotnet nor NuGet tasks do not allow to pass --skip-duplicate (or -skipDuplicate) parameter.
        # https://stackoverflow.com/questions/46115212
        
        dotnet nuget push $(Build.ArtifactStagingDirectory)/*.nupkg --skip-duplicate --api-key $(NuGetApiKey) --source https://api.nuget.org/v3/index.json
      displayName: Publish NuGet Package
      failOnStderr: true

- template: deploy-template.yaml
  parameters:
    envName: prod
    envDisplayName: Production
